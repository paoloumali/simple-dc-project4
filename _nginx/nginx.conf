
user  nginx;
worker_processes  auto;

worker_rlimit_nofile 8192;

events {
    worker_connections  1024;
}

error_log  /proc/self/fd/2 warn;
pid        /var/run/nginx.pid;

include templates/custom.d/*.conf;

http {
    # Hide Nginx version information.
    server_tokens off;
    default_type  application/octet-stream;

    include       templates/h5bp/mime.types;
    include       templates/h5bp/media_types/character_encodings.conf;
    
    keepalive_timeout  20s;
    tcp_nopush     on;
    sendfile        on;
    #tcp_nopush     on;
    #gzip  on;

    # Enable gzip compression.
    include templates/h5bp/web_performance/compression.conf;

    # Specify file cache expiration.
    include templates/h5bp/web_performance/cache_expiration.conf;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /proc/self/fd/1  main;

    include /etc/nginx/conf.d/*.conf;

    # Add Cache-Control.
    # h5bp/web_performance/cache-control.conf
    map $sent_http_content_type $cache_control {
        default                           "public, immutable, stale-while-revalidate";

        # No content
        ""                                "no-store";

        # Manifest files
        ~*application/manifest\+json      "public";
        ~*text/cache-manifest             ""; # `no-cache` (*)

        # Assets
        ~*image/svg\+xml                  "public, immutable, stale-while-revalidate";

        # Data interchange
        ~*application/(atom|rdf|rss)\+xml "public, stale-while-revalidate";

        # Documents
        ~*text/html                       "private, must-revalidate";
        ~*text/markdown                   "private, must-revalidate";
        ~*text/calendar                   "private, must-revalidate";

        # Data
        ~*json                            ""; # `no-cache` (*)
        ~*xml                             ""; # `no-cache` (*)
    }
    add_header Cache-Control $cache_control;

    
}
